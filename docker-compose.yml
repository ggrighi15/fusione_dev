# Fusione Core System - Docker Compose
# Orquestração completa dos serviços

version: '3.8'

services:
  # Aplicação principal
  fusione-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fusione-core
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - API_PORT=3000
      - API_HOST=0.0.0.0
      - JWT_SECRET=${JWT_SECRET:-fusione-default-secret-change-in-production}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
    depends_on: []
    networks:
      - fusione-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s



  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: fusione-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - fusione-app
    networks:
      - fusione-network
    profiles:
      - production

  # Prometheus para monitoramento (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fusione-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fusione-network
    profiles:
      - monitoring

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: fusione-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-fusione123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - fusione-network
    profiles:
      - monitoring

  # Container de desenvolvimento do módulo contencioso
  contencioso-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: fusione-contencioso-dev
    restart: unless-stopped
    ports:
      - "3002:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - API_PORT=3000
      - API_HOST=0.0.0.0
      - JWT_SECRET=${JWT_SECRET:-fusione-dev-secret}
      - MODULE_FOCUS=contencioso
      - HOT_RELOAD=true
      - DEBUG_MODE=true
    volumes:
      - ./src/modules/contencioso-module:/app/src/modules/contencioso-module
      - ./src/core:/app/src/core
      - ./src/middleware:/app/src/middleware
      - ./src/models:/app/src/models
      - ./config:/app/config
      - ./data:/app/data
      - ./logs/contencioso:/app/logs
      - /app/node_modules  # Evita conflitos de dependências
    depends_on:
      - fusione-app
    networks:
      - fusione-network
    profiles:
      - development
    command: [
      "npm", "run", "dev:contencioso"
    ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/contencioso/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s



# Volumes persistentes
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Rede personalizada
networks:
  fusione-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16