# Fusione Core System - Kubernetes Deployment Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: fusione-system
  labels:
    name: fusione-system
    app: fusione-core-system
---
# ConfigMap para configurações da aplicação
apiVersion: v1
kind: ConfigMap
metadata:
  name: fusione-config
  namespace: fusione-system
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "3000"
  MONGODB_HOST: "mongodb-service"
  MONGODB_PORT: "27017"
  MONGODB_DATABASE: "fusione"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  CACHE_TTL: "3600"
  SESSION_TIMEOUT: "1800000"
  RATE_LIMIT_WINDOW: "900000"
  RATE_LIMIT_MAX: "100"
---
# Secret para dados sensíveis
apiVersion: v1
kind: Secret
metadata:
  name: fusione-secrets
  namespace: fusione-system
type: Opaque
data:
  # Base64 encoded values - substitua pelos valores reais
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1oZXJl
  ENCRYPTION_KEY: eW91ci1lbmNyeXB0aW9uLWtleS1oZXJl
  MONGODB_USERNAME: ZnVzaW9uZV9hcHA=
  MONGODB_PASSWORD: ZnVzaW9uZV9hcHBfcGFzc3dvcmQ=
  REDIS_PASSWORD: ""
---
# PersistentVolume para MongoDB
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
  namespace: fusione-system
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /data/mongodb
---
# PersistentVolumeClaim para MongoDB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: fusione-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
# PersistentVolume para Redis
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  namespace: fusione-system
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /data/redis
---
# PersistentVolumeClaim para Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: fusione-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: fusione-system
  labels:
    app: mongodb
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "admin_password"
        - name: MONGO_INITDB_DATABASE
          value: "fusione"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-init
        configMap:
          name: mongodb-init-script
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: fusione-system
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: fusione-system
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - "allkeys-lru"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: fusione-system
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Fusione App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fusione-app
  namespace: fusione-system
  labels:
    app: fusione-app
    component: application
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fusione-app
  template:
    metadata:
      labels:
        app: fusione-app
        component: application
    spec:
      containers:
      - name: fusione-app
        image: fusione-core-system:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: LOG_LEVEL
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: PORT
        - name: MONGODB_HOST
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: MONGODB_HOST
        - name: MONGODB_PORT
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: MONGODB_PORT
        - name: MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: MONGODB_DATABASE
        - name: MONGODB_USERNAME
          valueFrom:
            secretKeyRef:
              name: fusione-secrets
              key: MONGODB_USERNAME
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fusione-secrets
              key: MONGODB_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: fusione-config
              key: REDIS_PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: fusione-secrets
              key: JWT_SECRET
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: fusione-secrets
              key: ENCRYPTION_KEY
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      initContainers:
      - name: wait-for-mongodb
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z mongodb-service 27017; do
            echo "Aguardando MongoDB..."
            sleep 2
          done
          echo "MongoDB está pronto!"
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          until nc -z redis-service 6379; do
            echo "Aguardando Redis..."
            sleep 2
          done
          echo "Redis está pronto!"
---
# Fusione App Service
apiVersion: v1
kind: Service
metadata:
  name: fusione-app-service
  namespace: fusione-system
  labels:
    app: fusione-app
spec:
  selector:
    app: fusione-app
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
  type: ClusterIP
---
# Ingress para exposição externa
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fusione-ingress
  namespace: fusione-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - fusione.yourdomain.com
    secretName: fusione-tls
  rules:
  - host: fusione.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fusione-app-service
            port:
              number: 80
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fusione-app-hpa
  namespace: fusione-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fusione-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
# NetworkPolicy para segurança
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fusione-network-policy
  namespace: fusione-system
spec:
  podSelector:
    matchLabels:
      app: fusione-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mongodb
    ports:
    - protocol: TCP
      port: 27017
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
---
# ServiceMonitor para Prometheus (se usando Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: fusione-app-metrics
  namespace: fusione-system
  labels:
    app: fusione-app
spec:
  selector:
    matchLabels:
      app: fusione-app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s